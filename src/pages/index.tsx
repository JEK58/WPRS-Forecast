import { type CompForecast } from "@/utils/calculate-wprs";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState, type ChangeEvent } from "react";
import { json } from "stream/consumers";

const Home: NextPage = () => {
  const [compForecast, setCompForecast] = useState<CompForecast | undefined>();
  const [isLoading, setIsLoading] = useState(false);
  const [url, setUrl] = useState<string>(
    "https://airtribune.com/montegrappa-trophy-2023"
  );

  const handleSubmit = async (event: ChangeEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setCompForecast(undefined);
    const endpoint = "/api/comp-forecast";
    const options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ url }),
    };

    try {
      const response = await fetch(endpoint, options);

      if (response.status === 201) {
        const resData = (await response.json()) as CompForecast;
        setIsLoading(false);
        setCompForecast(resData);
      }
      //  else if (response.status === 429) setError(tooManyCheckinsWarning);
      // else throw new Error("Da ist was schief gegangen");
    } catch (error) {
      setIsLoading(false);
      // setError(badConnectionWarning);
      console.log(error);
    }
  };

  function onUrlChange(event: ChangeEvent<HTMLInputElement>) {
    setUrl(event.target.value);
  }

  return (
    <>
      <Head>
        <title>WPRS Forecast</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center  bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            WPRS <span className="text-[hsl(125,50%,56%)]">Forecast</span>
          </h1>
          {/* <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href=""
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
    
              </div>
            </Link> */}
          {/* <div className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20">
            <h3 className="text-2xl font-bold">Documentation →</h3>
            <div className="text-lg"></div>
          </div> */}
          <div className="mt-6 flex justify-center space-x-6 text-sm sm:mt-10">
            <button
              onClick={handleSubmit}
              className="dark:highlight-white/20 flex h-12 w-full items-center justify-center rounded-lg bg-slate-900 px-6 font-semibold text-white hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50 sm:w-auto"
            >
              {isLoading && (
                <svg
                  className="-ml-1 mr-3 h-5 w-5 animate-spin text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  ></path>
                </svg>
              )}
              Calculate
            </button>

            {/* <label htmlFor="url-input">Comp link</label> */}
            <input
              id="url-input"
              type="text"
              className="dark:highlight-white/5 hidden h-12 w-72 items-center space-x-3 rounded-lg bg-white px-4 text-left text-slate-400 shadow-sm ring-1 ring-slate-900/10 hover:ring-slate-300 focus:outline-none focus:ring-2 focus:ring-[hsl(125,50%,56%)]  sm:flex"
              onChange={onUrlChange}
              placeholder="Link to comp (civl or airtribune)"
            />
          </div>

          {compForecast && (
            <div className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20">
              <div className="text-lg">{compForecast?.WPR}</div>
            </div>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
